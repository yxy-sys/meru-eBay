name: dorasuta-ebay-sync

on:
  schedule:
    # 每小时 0 分运行一次（UTC）
    - cron: "0 * * * *"
  workflow_dispatch:

concurrency:
  group: dorasuta-ebay-sync
  cancel-in-progress: false

jobs:
  run-sync:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    env:
      # ==== eBay 凭证 ====
      EBAY_DEV_ID:       ${{ secrets.EBAY_DEV_ID }}
      EBAY_APP_ID:       ${{ secrets.EBAY_APP_ID }}
      EBAY_CERT_ID:      ${{ secrets.EBAY_CERT_ID }}
      EBAY_AUTH_TOKEN:   ${{ secrets.EBAY_AUTH_TOKEN }}

      # ==== 表格读取 ====
      SHEETS_MODE:       PUBLIC_CSV
      SHEET_CSV_URL:     ${{ secrets.SHEET_CSV_URL }}

      # ==== 抓取配置 ====
      FETCH_MODE:        PLAYWRIGHT
      PW_BLOCK_MEDIA:    "true"
      REQUESTS_TIMEOUT:  "25"
      DRY_RUN:           "false"

      # ==== Telegram（可选）====
      TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      TELEGRAM_CHAT_ID:   ${{ secrets.TELEGRAM_CHAT_ID }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install Playwright browsers & deps
        run: |
          python -m playwright install --with-deps chromium

      - name: Run dorasuta main & capture logs
        shell: bash
        run: |
          set -o pipefail
          # 运行并保存日志
          python main_dorasuta.py 2>&1 | tee run.log
          CODE=${PIPESTATUS[0]}

          # 标记失败
          if [ $CODE -ne 0 ]; then
            echo "error" > status.txt
          fi

          # 仅当日志中出现“eBay 已清零”且未失败时，才标记为清零
          if grep -Fq "[DORASUTA] eBay 已清零" run.log && [ ! -f status.txt ]; then
            echo "ebay_zero" > status.txt
          fi

          exit $CODE

      - name: Notify Telegram on fail/zero
        if: always()
        env:
          BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          CHAT_ID:   ${{ secrets.TELEGRAM_CHAT_ID }}
          RUN_URL:   ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        shell: bash
        run: |
          # 未配置 Telegram 则跳过
          if [ -z "$BOT_TOKEN" ] || [ -z "$CHAT_ID" ]; then
            echo "Telegram not configured, skip."
            exit 0
          fi

          if [ -f status.txt ]; then
            STATUS=$(cat status.txt)
            if [ "$STATUS" = "error" ]; then
              TEXT="❌ [DORASUTA] 同步失败，请检查日志。\n🔗 $RUN_URL"
            elif [ "$STATUS" = "ebay_zero" ]; then
              TEXT="⚠️ [DORASUTA] 检测到 eBay 商品库存被清零。\n🔗 $RUN_URL"
            fi

            if [ -n "$TEXT" ]; then
              curl -sS -X POST "https://api.telegram.org/bot${BOT_TOKEN}/sendMessage" \
                   -H "Content-Type: application/json" \
                   -d "{\"chat_id\":\"${CHAT_ID}\",\"text\":\"${TEXT}\",\"disable_web_page_preview\":true}" \
                   >/dev/null
              echo "Telegram notified: $STATUS"
            fi
          else
            echo "No status.txt → 无需通知。"
          fi

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dorasuta-sync-logs
          path: |
            run.log
            **/*.log
            logs/**
          if-no-files-found: ignore
